<?xml version="1.0"?>
<s:Application 
    xmlns:fx="http://ns.adobe.com/mxml/2009"    
    xmlns:mx="library://ns.adobe.com/flex/mx"     
    xmlns:s="library://ns.adobe.com/flex/spark"
    width="500"
    initialize="init()" >


<fx:Script >

<![CDATA[
     
import Saite;
import Samples;
import mx.controls.Alert;
       
public var saiten:Vector.<Saite>;
public var samples : Samples;
public var cycle:Array= new Array("Eb","Bb","F","C","G","D","A","E","B","F#","C#","G#");

private var mode: uint=0;
private var x1: int;
private var x2: int;

private var chordAlt: Boolean = false;

private function init() : void {

  samples = new Samples();
  saiten = new Vector.<Saite>();
 

  for (var i:uint = 0; i < 12; i++) { 
    saiten[i] = new Saite(monitor,saiten,20+i*20,samples.co5[i]);
    canvas.addChild (saiten[i]);
   }

  
   saiten[2].setColour(0xaa3a4a);
   saiten[6].setColour(0xaa3a4a);
   saiten[10].setColour(0xaa3a4a);

   
  panel.addEventListener(KeyboardEvent.KEY_DOWN,keyPressed);
  panel.addEventListener(KeyboardEvent.KEY_UP,keyReleased);
  panel.addEventListener(MouseEvent.MOUSE_DOWN, startDragging);
  panel.addEventListener(MouseEvent.MOUSE_UP, stopDragging);

}


private function setMode(mode: uint): void {

   this.mode=mode;

}

private function keyPressed(event:KeyboardEvent):void {
  if (event.keyCode == Keyboard.SHIFT) {
         chordAlt=true; current.text='shift';
  }
} 


private function keyReleased(event:KeyboardEvent):void {

 if (event.keyCode == Keyboard.SHIFT) {
  chordAlt=false;noteKey.visible=true;
  current.text="";
   }
}



private function startDragging(event:MouseEvent):void {

  x1=event.localX/20;

  if (x1>12||event.localY<20) x1=-1;
 }

private function stopDragging(event:MouseEvent):void{

   var tonic: uint;
   var fifth: uint;
   var third: uint;

   if (x1<0) return;

   x2=event.localX/20;

   if (x2>12||x1==x2) {x1=-1;return;}

   if (x1>x2){    // minor third
    tonic=x1-1;
    monitor.text=cycle[tonic]+"m";

    third=(tonic+9)%12;

    fifth= (tonic+1)%12;
    if (chordAlt) {
       fifth=(fifth+5)%12;     // diminished fifth
       monitor.text=cycle[tonic]+"dim";
       }

  } 
    else {
         tonic=x1;                        
         if (chordAlt){ 
             third=(tonic+10)%12;    // 7th
             monitor.text=cycle[tonic]+"7";
              
         } else {
             third=(tonic+4)%12;                  // major
             monitor.text=cycle[tonic];
             }
         fifth= (tonic+1)%12;
      }
   
    saiten[tonic].pluck();
  
    if (mode!=1) monitor.text=cycle[tonic];
       else {
    saiten[third].pluck();
    saiten[fifth].pluck();}


}

]]>

</fx:Script>


<s:Panel id="panel" title="Swipe Harp" width="360" height="160">

 <mx:UIComponent id="canvas"  />

<s:Group id="noteKey"  y="105" color="0xaaaaaa">
<mx:Text x="5" text="Eb"/>
<mx:Text x="30" text="Bb"/>
<mx:Text x="55" text="F"/>
<mx:Text x="72" text="C"/>
<mx:Text x="92" text="G"/>
<mx:Text x="115" text="D"/>
<mx:Text x="135" text="A"/>
<mx:Text x="153" text="E"/>
<mx:Text x="172" text="B"/>
<mx:Text x="187" text="F#"/>
<mx:Text x="208" text="C#"/>
<mx:Text x="230" text="G#"/>
</s:Group>


 <s:Label x="270" y="80" id="current"   color="0xaaaaaa" text=""/>
 <s:Label x="270" y="100" id="monitor"   color="blue" text=""/>
<s:VGroup x="270" paddingTop="10">
 <s:Label id="about" paddingTop="5"  color="blue" text="-about-"
 click="Alert.show('This app illustrates the cycle-of-fifths stringing principle first described by the 17th century luthier Michael Praetorius.\r\r
In *tritone* mode, right-drag the mouse across a string to play
 the major triad rooted on that atring. Holding down SHIFT substitutes the dominant seventh for the third. Left-drag the mouse to play the minor triad; SHIFT now flattens the fifth \r\rSwipeHarp (c) Nick Braun, 2011\r
', 'About', mx.controls.Alert.OK);"/>
  
 <s:RadioButton groupName="menu" label="unitone" selected="true" click="setMode(0)"  />
 <s:RadioButton groupName="menu" label="tritone"  click="setMode(1)"/>

</s:VGroup>

</s:Panel>
</s:Application>
